/*! indexdbjs v1.0.0 | MIT */
function e(e,t,s="primary"){console.log(`%c ${e} %c ${t} %c`,"background:#35495E; padding: 1px; border-radius: 3px 0 0 3px; color: #fff;",`background:${function(e="default"){let t="";switch(e){case"default":t="#35495E";break;case"primary":t="#3488ff";break;case"success":t="#43B883";break;case"warning":t="#e6a23c";break;case"danger":t="#f56c6c"}return t}(s)}; padding: 1px; border-radius: 0 3px 3px 0;  color: #fff;`,"background:transparent")}const t=new class{constructor(e){this.title=e}default(t){e(this.title,t,"default")}primary(t){e(this.title,t,"primary")}success(t){e(this.title,t,"success")}warning(t){e(this.title,t,"warning")}danger(t,s){e(this.title,t,"danger")}}("DB");class s{constructor(e,t=1,s=[]){this.name=e,this.version=t,this.tables=s}init({debug:e=!1}){return this.debug=e,new Promise(((e,s)=>{const r=window.indexedDB.open(this.name,this.version);r.onerror=e=>{s(e),this.debug&&t.danger(`${this.name}数据库打开报错`),this.deleteDB(this.name).then((()=>{this.init()}))},r.onsuccess=()=>{e(r.result),this.db=r.result,this.debug&&t.success(`${this.name}数据库打开成功`)},r.onupgradeneeded=s=>{this.debug&&t.primary(`数据库升级，名称：${this.name}， 版本: ${this.version}`);const r=s.target.result;this.tables.forEach((({name:e,options:t,indexList:s=[]})=>{let n;r.objectStoreNames.contains(e)||(n=r.createObjectStore(e,t),s.forEach((({name:e,options:t})=>{n.createIndex(e,e,t)})))}));const{transaction:n}=s.target;n.oncomplete=t=>{this.db=t.target.result,e(t.target.result)}}}))}add(e,s,r){return new Promise(((n,i)=>{this.db||i();const o=this.db.transaction([e],"readwrite").objectStore(e).add(s,r);o.onsuccess=i=>{n(s,r),this.debug&&t.success(`${e}_${r}:${JSON.stringify(s)}写入成功`)},o.onerror=n=>{i(n),this.debug&&t.danger(`${e}_${r}:${JSON.stringify(s)}写入失败`)}}))}put(e,s,r){return new Promise(((n,i)=>{this.db||i();const o=this.db.transaction([e],"readwrite").objectStore(e).put(s,r);o.onsuccess=i=>{n(s,r),this.debug&&t.success(`${e}_${r}:${JSON.stringify(s)}更新成功`)},o.onerror=n=>{i(n),this.debug&&t.danger(`${e}_${r}:${JSON.stringify(s)}更新失败`)}}))}addOrPut(e,t,s,r){return(s?this.get(e,s):this.get(e)).then((s=>void 0!==s?this.put(e,t,r):this.add(e,t,r))).catch((s=>(console.log(s),this.add(e,t,r))))}clear(e){return new Promise(((s,r)=>{this.db||r();const n=this.db.transaction(e,"readwrite").objectStore(e),i=n.clear();i.onsuccess=e=>{s(e),this.debug&&t.success(`${n.name}数据清除成功`)},i.onerror=e=>{r(e),this.debug&&t.danger(`${n.name}数据清除失败`)}}))}remove(e,s){return new Promise(((r,n)=>{this.db||n();const i=this.db.transaction([e],"readwrite").objectStore(e).delete(s);i.onsuccess=n=>{r(n),this.debug&&t.success(`${e}_${s}:删除成功`)},i.onerror=r=>{n(r),this.debug&&t.danger(`${e}_${s}:删除失败`)}}))}count(e,s){return new Promise(((r,n)=>{this.db||n();const i=this.db.transaction([e]).objectStore(e).count(s);i.onerror=n=>{r(0),this.debug&&t.danger(`${e}_${s}:获取数量失败`)},i.onsuccess=e=>{r(i.result)}}))}getIndex(e,s,r){const n=this.db.transaction([e]).objectStore(e).index(s).getAll(r);return new Promise(((i,o)=>{this.db||o(),n.onerror=n=>{o(n),this.debug&&t.danger(`${e}_${s}:获取${r}失败`)},n.onsuccess=o=>{n.result?(i(n.result),this.debug&&t.success(`${e}_${s}_${r}:${JSON.stringify(n.result)}`)):(i(void 0),this.debug&&t.warning(`${e}_${s}_${r}:未获得数据记录`))}}))}getIndexCount(e,s,r){const n=this.db.transaction([e]).objectStore(e).index(s).count(r);return new Promise(((i,o)=>{this.db||o(),n.onerror=n=>{i(0),this.debug&&t.danger(`${e}_${s}_${r}:获取数量失败`)},n.onsuccess=o=>{i(n.result),this.debug&&t.success(`${e}_${s}_${r}:${n.result}`)}}))}removeIndex(e,s,r){const n=this.db.transaction([e],"readwrite").objectStore(e),i=n.index(s).openKeyCursor(IDBKeyRange.only(r));return new Promise(((o,c)=>{this.db||c(),i.onerror=n=>{c(n),this.debug&&t.danger(`${e}_${s}:获取${r}失败`)},i.onsuccess=async c=>{if(i.result){const e=i.result;e&&(n.delete(e.primaryKey),await e.continue(),o(e))}else o(void 0),this.debug&&t.warning(`${e}_${s}_${r}:未获得数据记录`)}}))}getKey(e,t){return new Promise(((s,r)=>{this.db||r();const n=this.db.transaction([e]).objectStore(e).getKey(t);n.onerror=e=>{r(e)},n.onsuccess=e=>{n.result?s(n.result):s(void 0)}}))}get(e,s){return new Promise(((r,n)=>{this.db||n();const i=this.db.transaction([e]).objectStore(e).get(s);i.onerror=r=>{n(r),this.debug&&t.danger(`获取${e}_${s}失败`)},i.onsuccess=n=>{void 0!==i.result?r(i.result):(r(void 0),this.debug&&t.warning(`${e}_${s}:未获得数据记录`))}}))}getAll(e,t,s){return new Promise(((r,n)=>{this.db||n();const i=this.db.transaction(e).objectStore(e).getAll(t,s);i.onsuccess=e=>{r(e.target.result)},i.onerror=e=>{r([])}}))}getAllKeys(e,t,s){return new Promise(((r,n)=>{this.db||n();const i=this.db.transaction(e).objectStore(e).getAllKeys(t,s);i.onsuccess=e=>{r(e.target.result)},i.onerror=e=>{r([])}}))}close(){return new Promise(((e,s)=>{this.db||s(),this.db.onclose=s=>{e(s),this.debug&&t.danger(`${this.name}数据库关闭`)},this.db.close()}))}deleteDB(e){return new Promise(((s,r)=>{const n=window.indexedDB.deleteDatabase(e);n.onerror=s=>{r(s),this.debug&&t.danger(`${e}数据库删除失败`)},n.onsuccess=r=>{s(r),this.debug&&t.success(`${e}数据库删除成功`)}}))}}export{s as default};
